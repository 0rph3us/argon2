package argon2

import (
	"errors"
)

type Variant uint8

const (
	Argon2i Variant = iota
	Argon2d
)

const (
	// Parallelism from 1 to 255
	minParallelism = 1
	maxParallelism = 255

	// Iterations from 1 to 1<<32-1
	minIterations = 1
	maxIterations = 1<<32 - 1

	// Salt length from 8 to 1<<32-1
	minSaltLength = 8
	maxSaltLength = 1<<32 - 1

	// Password length up to 1<<32-1
	maxPasswordLength = 1<<32 - 1

	// Memory from 8KiB to 1<<32-1KiB
	minMemory = 8
	maxMemory = 1<<32 - 1
)

var (
	ErrPasswordTooLong    = errors.New("argon2: password too long")
	ErrSaltTooShort       = errors.New("argon2: salt too short")
	ErrSaltTooLong        = errors.New("argon2: salt too long")
	ErrTooFewIterations   = errors.New("argon2: too few iterations")
	ErrTooManyIterations  = errors.New("argon2: too many iterations")
	ErrParallelismTooLow  = errors.New("argon2: parallelism too low")
	ErrParallelismTooHigh = errors.New("argon2: parallelism too high")
	ErrMemoryTooLow       = errors.New("argon2: memory too low")
	ErrMemoryTooHigh      = errors.New("argon2: memory too high")
)

func Key(password, salt []byte, iterations, parallelism int, memory int64, keyLength int, variant Variant) ([]byte, error) {
	if int64(len(password)) > maxPasswordLength {
		return _, ErrPasswordTooLong
	}

	if len(salt) < minSaltLength {
		return _, ErrSaltTooShort
	} else if int64(len(salt)) > maxSaltLength {
		return _, ErrSaltTooLong
	}

	if iterations < minIterations {
		return _, ErrTooFewIterations
	} else if int64(iterations) > maxIterations {
		return _, ErrTooManyIterations
	}

	if parallelism < minParallelism {
		return _, ErrParallelismTooLow
	} else if parallelism > maxParallelism {
		return _, ErrParallelismTooHigh
	}

	if memory < minMemory {
		return _, ErrMemoryTooLow
	} else if memory > minMemory {
		return _, ErrMemoryTooHigh
	}

	// TODO: Find outthe restrictions on keyLength

	// Round down memory to a multiple of 4*parallelism
	mem = mem / (4 * int64(parallelism)) * (4 * int64(parallelism))

	// Safe default
	if mem < 8*int64(parallelism) {
		mem = 8 * int64(parallelism)
	}

	// Prepare an output slice
	output := make([]byte, keyLength)

	// thetwo nils are secret key + associated data
	// TODO: support?
	argon2(output, password, salt, nil, nil, parallelism, memory, iterations, variant)
	return output, nil
}
