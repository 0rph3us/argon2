package argon2

/* Argon2 internal constants */
const (
	// Version of the algorithm
	ARGON2_VERSION_NUMBER = 0x10

	// Memory block size in bytes
	ARGON2_BLOCK_SIZE      = 1024
	ARGON2_QWORDS_IN_BLOCK = ARGON2_BLOCK_SIZE / 8
	ARGON2_OWORDS_IN_BLOCK = ARGON2_BLOCK_SIZE / 16

	// Number of pseudo-random values generated by one call to Blake
	// in Argon2i to generate reference block positions
	ARGON2_ADDRESSES_IN_BLOCK = 128

	// Pre-hashing digest length and its extension
	ARGON2_PREHASH_DIGEST_LENGTH = 64
	ARGON2_PREHASH_SEED_LENGTH   = 72
)

/* Argon2 internal data types */

// Structure for the 1KB memory block implemented as 128 64-bit words.
// Memory blocks can be copied, XORed. Internal words can be accessed by []
// (no bounds checking).
type block [ARGON2_QWORDS_IN_BLOCK]uint64

// Argon2 instance
type argon2_instance struct {
	memory          []block // Memory pointer
	passes          uint32  // Number of passes
	memory_blocks   uint32  // Number of blocks in memory
	segment_length  uint32
	lane_length     uint32
	lanes           uint32
	threads         uint32
	variant         Variant
	print_internals int
}

// Argon2 position: where we construct the block right now. Used to
// distribute work between threads.
type argon2_position struct {
	pass  uint32
	lane  uint32
	slice uint8
	index uint32
}

// Struct that holds inputs for thread handling FillSegment
type argon2_thread_data struct {
	instance *argon2_instance
	position argon2_position
}
